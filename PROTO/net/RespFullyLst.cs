// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RespFullyLst.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace pbnet {

  #region Messages
  public sealed partial class RespRawData : pb::IMessage<RespRawData>
  {
    private static readonly pb::MessageParser<RespRawData> _parser = new pb::MessageParser<RespRawData>(() => new RespRawData());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<RespRawData> Parser { get { return _parser; } }

    public RespRawData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RespRawData(RespRawData other) : this() {
      typeSign_ = other.typeSign_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public RespRawData Clone() {
      return new RespRawData(this);
    }

    /// <summary>Field number for the "typeSign" field.</summary>
    public const int TypeSignFieldNumber = 1;
    private int typeSign_;
    /// <summary>
    /// 类型标识
    /// </summary>
    public int TypeSign {
      get { return typeSign_; }
      set {
        typeSign_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 原始数据
    /// </summary>
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RespRawData);
    }

    public bool Equals(RespRawData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeSign != other.TypeSign) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TypeSign != 0) hash ^= TypeSign.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeSign != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(TypeSign);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TypeSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TypeSign);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(RespRawData other) {
      if (other == null) {
        return;
      }
      if (other.TypeSign != 0) {
        TypeSign = other.TypeSign;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeSign = input.ReadSInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///1
  /// </summary>
  public sealed partial class RespFullyLst : pb::IMessage<RespFullyLst>
  {
    private static readonly pb::MessageParser<RespFullyLst> _parser = new pb::MessageParser<RespFullyLst>(() => new RespFullyLst());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<RespFullyLst> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 1;
    public RespFullyLst() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RespFullyLst(RespFullyLst other) : this() {
      resps_ = other.resps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public RespFullyLst Clone() {
      return new RespFullyLst(this);
    }

    /// <summary>Field number for the "resps" field.</summary>
    public const int RespsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::pbnet.RespRawData> _repeated_resps_codec
        = pb::FieldCodec.ForMessage(10, global::pbnet.RespRawData.Parser);
    private readonly pbc::RepeatedField<global::pbnet.RespRawData> resps_ = new pbc::RepeatedField<global::pbnet.RespRawData>();
    public pbc::RepeatedField<global::pbnet.RespRawData> Resps {
      get { return resps_; }
    }

    public override bool Equals(object other) {
      return Equals(other as RespFullyLst);
    }

    public bool Equals(RespFullyLst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resps_.Equals(other.resps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= resps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      resps_.WriteTo(output, _repeated_resps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += resps_.CalculateSize(_repeated_resps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(RespFullyLst other) {
      if (other == null) {
        return;
      }
      resps_.Add(other.resps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resps_.AddEntriesFrom(input, _repeated_resps_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///玩家信息
  /// </summary>
  public sealed partial class RespPlayerInfo : pb::IMessage<RespPlayerInfo>
  {
    private static readonly pb::MessageParser<RespPlayerInfo> _parser = new pb::MessageParser<RespPlayerInfo>(() => new RespPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<RespPlayerInfo> Parser { get { return _parser; } }

    public RespPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RespPlayerInfo(RespPlayerInfo other) : this() {
      actorID_ = other.actorID_;
      roleID_ = other.roleID_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public RespPlayerInfo Clone() {
      return new RespPlayerInfo(this);
    }

    /// <summary>Field number for the "actorID" field.</summary>
    public const int ActorIDFieldNumber = 1;
    private int actorID_;
    /// <summary>
    /// id
    /// </summary>
    public int ActorID {
      get { return actorID_; }
      set {
        actorID_ = value;
      }
    }

    /// <summary>Field number for the "roleID" field.</summary>
    public const int RoleIDFieldNumber = 2;
    private int roleID_;
    public int RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RespPlayerInfo);
    }

    public bool Equals(RespPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActorID != other.ActorID) return false;
      if (RoleID != other.RoleID) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ActorID != 0) hash ^= ActorID.GetHashCode();
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActorID != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ActorID);
      }
      if (RoleID != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(RoleID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActorID);
      }
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RoleID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(RespPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ActorID != 0) {
        ActorID = other.ActorID;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActorID = input.ReadSInt32();
            break;
          }
          case 16: {
            RoleID = input.ReadSInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///2
  /// </summary>
  public sealed partial class RespHeartBeat : pb::IMessage<RespHeartBeat>
  {
    private static readonly pb::MessageParser<RespHeartBeat> _parser = new pb::MessageParser<RespHeartBeat>(() => new RespHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<RespHeartBeat> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 2;
    public RespHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RespHeartBeat(RespHeartBeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public RespHeartBeat Clone() {
      return new RespHeartBeat(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RespHeartBeat);
    }

    public bool Equals(RespHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(RespHeartBeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }
  }

  /// <summary>
  ///3
  /// </summary>
  public sealed partial class Msg_G2C_PlayerPing : pb::IMessage<Msg_G2C_PlayerPing>
  {
    private static readonly pb::MessageParser<Msg_G2C_PlayerPing> _parser = new pb::MessageParser<Msg_G2C_PlayerPing>(() => new Msg_G2C_PlayerPing());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_G2C_PlayerPing> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 3;
    public Msg_G2C_PlayerPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_G2C_PlayerPing(Msg_G2C_PlayerPing other) : this() {
      localId_ = other.localId_;
      sendTimestamp_ = other.sendTimestamp_;
      timeSinceServerStart_ = other.timeSinceServerStart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_G2C_PlayerPing Clone() {
      return new Msg_G2C_PlayerPing(this);
    }

    /// <summary>Field number for the "localId" field.</summary>
    public const int LocalIdFieldNumber = 1;
    private int localId_;
    public int LocalId {
      get { return localId_; }
      set {
        localId_ = value;
      }
    }

    /// <summary>Field number for the "sendTimestamp" field.</summary>
    public const int SendTimestampFieldNumber = 2;
    private long sendTimestamp_;
    public long SendTimestamp {
      get { return sendTimestamp_; }
      set {
        sendTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timeSinceServerStart" field.</summary>
    public const int TimeSinceServerStartFieldNumber = 3;
    private long timeSinceServerStart_;
    public long TimeSinceServerStart {
      get { return timeSinceServerStart_; }
      set {
        timeSinceServerStart_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_G2C_PlayerPing);
    }

    public bool Equals(Msg_G2C_PlayerPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalId != other.LocalId) return false;
      if (SendTimestamp != other.SendTimestamp) return false;
      if (TimeSinceServerStart != other.TimeSinceServerStart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (LocalId != 0) hash ^= LocalId.GetHashCode();
      if (SendTimestamp != 0L) hash ^= SendTimestamp.GetHashCode();
      if (TimeSinceServerStart != 0L) hash ^= TimeSinceServerStart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LocalId);
      }
      if (SendTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(SendTimestamp);
      }
      if (TimeSinceServerStart != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TimeSinceServerStart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LocalId);
      }
      if (SendTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SendTimestamp);
      }
      if (TimeSinceServerStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimeSinceServerStart);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_G2C_PlayerPing other) {
      if (other == null) {
        return;
      }
      if (other.LocalId != 0) {
        LocalId = other.LocalId;
      }
      if (other.SendTimestamp != 0L) {
        SendTimestamp = other.SendTimestamp;
      }
      if (other.TimeSinceServerStart != 0L) {
        TimeSinceServerStart = other.TimeSinceServerStart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocalId = input.ReadSInt32();
            break;
          }
          case 16: {
            SendTimestamp = input.ReadSInt64();
            break;
          }
          case 24: {
            TimeSinceServerStart = input.ReadSInt64();
            break;
          }
        }
      }
    }
  }

  public sealed partial class ServerFrame : pb::IMessage<ServerFrame>
  {
    private static readonly pb::MessageParser<ServerFrame> _parser = new pb::MessageParser<ServerFrame>(() => new ServerFrame());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ServerFrame> Parser { get { return _parser; } }

    public ServerFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ServerFrame(ServerFrame other) : this() {
      tick_ = other.tick_;
      inputs_ = other.inputs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ServerFrame Clone() {
      return new ServerFrame(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private int tick_;
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "Inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pbc::MapField<int, global::pbnet.PlayerInput>.Codec _map_inputs_codec
        = new pbc::MapField<int, global::pbnet.PlayerInput>.Codec(pb::FieldCodec.ForSInt32(8, 0), pb::FieldCodec.ForMessage(18, global::pbnet.PlayerInput.Parser), 18);
    private readonly pbc::MapField<int, global::pbnet.PlayerInput> inputs_ = new pbc::MapField<int, global::pbnet.PlayerInput>();
    public pbc::MapField<int, global::pbnet.PlayerInput> Inputs {
      get { return inputs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ServerFrame);
    }

    public bool Equals(ServerFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if (!Inputs.Equals(other.Inputs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0) hash ^= Tick.GetHashCode();
      hash ^= Inputs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Tick);
      }
      inputs_.WriteTo(output, _map_inputs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Tick);
      }
      size += inputs_.CalculateSize(_map_inputs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ServerFrame other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      inputs_.MergeFrom(other.inputs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tick = input.ReadSInt32();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _map_inputs_codec);
            break;
          }
        }
      }
    }
  }

  public sealed partial class MutilFrames : pb::IMessage<MutilFrames>
  {
    private static readonly pb::MessageParser<MutilFrames> _parser = new pb::MessageParser<MutilFrames>(() => new MutilFrames());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<MutilFrames> Parser { get { return _parser; } }

    public MutilFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MutilFrames(MutilFrames other) : this() {
      startTick_ = other.startTick_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public MutilFrames Clone() {
      return new MutilFrames(this);
    }

    /// <summary>Field number for the "startTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::pbnet.ServerFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::pbnet.ServerFrame.Parser);
    private readonly pbc::RepeatedField<global::pbnet.ServerFrame> frames_ = new pbc::RepeatedField<global::pbnet.ServerFrame>();
    public pbc::RepeatedField<global::pbnet.ServerFrame> Frames {
      get { return frames_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MutilFrames);
    }

    public bool Equals(MutilFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(StartTick);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartTick);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(MutilFrames other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTick = input.ReadSInt32();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///4
  /// </summary>
  public sealed partial class Msg_ServerFrames : pb::IMessage<Msg_ServerFrames>
  {
    private static readonly pb::MessageParser<Msg_ServerFrames> _parser = new pb::MessageParser<Msg_ServerFrames>(() => new Msg_ServerFrames());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_ServerFrames> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 4;
    public Msg_ServerFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_ServerFrames(Msg_ServerFrames other) : this() {
      frames_ = other.frames_ != null ? other.frames_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_ServerFrames Clone() {
      return new Msg_ServerFrames(this);
    }

    /// <summary>Field number for the "Frames" field.</summary>
    public const int FramesFieldNumber = 1;
    private global::pbnet.MutilFrames frames_;
    public global::pbnet.MutilFrames Frames {
      get { return frames_; }
      set {
        frames_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_ServerFrames);
    }

    public bool Equals(Msg_ServerFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frames, other.Frames)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (frames_ != null) hash ^= Frames.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (frames_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Frames);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (frames_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frames);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_ServerFrames other) {
      if (other == null) {
        return;
      }
      if (other.frames_ != null) {
        if (frames_ == null) {
          Frames = new global::pbnet.MutilFrames();
        }
        Frames.MergeFrom(other.Frames);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frames_ == null) {
              Frames = new global::pbnet.MutilFrames();
            }
            input.ReadMessage(Frames);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///加入
  /// </summary>
  public sealed partial class Msg_G2C_JoinSuccess : pb::IMessage<Msg_G2C_JoinSuccess>
  {
    private static readonly pb::MessageParser<Msg_G2C_JoinSuccess> _parser = new pb::MessageParser<Msg_G2C_JoinSuccess>(() => new Msg_G2C_JoinSuccess());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_G2C_JoinSuccess> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 5;
    public Msg_G2C_JoinSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_G2C_JoinSuccess(Msg_G2C_JoinSuccess other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_G2C_JoinSuccess Clone() {
      return new Msg_G2C_JoinSuccess(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::pbnet.RespPlayerInfo info_;
    public global::pbnet.RespPlayerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_G2C_JoinSuccess);
    }

    public bool Equals(Msg_G2C_JoinSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_G2C_JoinSuccess other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::pbnet.RespPlayerInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::pbnet.RespPlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///6
  /// </summary>
  public sealed partial class Msg_G2C_GameStartInfo : pb::IMessage<Msg_G2C_GameStartInfo>
  {
    private static readonly pb::MessageParser<Msg_G2C_GameStartInfo> _parser = new pb::MessageParser<Msg_G2C_GameStartInfo>(() => new Msg_G2C_GameStartInfo());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_G2C_GameStartInfo> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 6;
    public Msg_G2C_GameStartInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_G2C_GameStartInfo(Msg_G2C_GameStartInfo other) : this() {
      userCount_ = other.userCount_;
      gameSeed_ = other.gameSeed_;
      infos_ = other.infos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_G2C_GameStartInfo Clone() {
      return new Msg_G2C_GameStartInfo(this);
    }

    /// <summary>Field number for the "UserCount" field.</summary>
    public const int UserCountFieldNumber = 1;
    private int userCount_;
    public int UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "GameSeed" field.</summary>
    public const int GameSeedFieldNumber = 2;
    private int gameSeed_;
    public int GameSeed {
      get { return gameSeed_; }
      set {
        gameSeed_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::pbnet.RespPlayerInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(26, global::pbnet.RespPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::pbnet.RespPlayerInfo> infos_ = new pbc::RepeatedField<global::pbnet.RespPlayerInfo>();
    public pbc::RepeatedField<global::pbnet.RespPlayerInfo> Infos {
      get { return infos_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_G2C_GameStartInfo);
    }

    public bool Equals(Msg_G2C_GameStartInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserCount != other.UserCount) return false;
      if (GameSeed != other.GameSeed) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (GameSeed != 0) hash ^= GameSeed.GetHashCode();
      hash ^= infos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserCount != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(UserCount);
      }
      if (GameSeed != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(GameSeed);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(UserCount);
      }
      if (GameSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameSeed);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_G2C_GameStartInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      if (other.GameSeed != 0) {
        GameSeed = other.GameSeed;
      }
      infos_.Add(other.infos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserCount = input.ReadSInt32();
            break;
          }
          case 16: {
            GameSeed = input.ReadSInt32();
            break;
          }
          case 26: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///7
  /// </summary>
  public sealed partial class Msg_G2C_LoadingProgress : pb::IMessage<Msg_G2C_LoadingProgress>
  {
    private static readonly pb::MessageParser<Msg_G2C_LoadingProgress> _parser = new pb::MessageParser<Msg_G2C_LoadingProgress>(() => new Msg_G2C_LoadingProgress());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_G2C_LoadingProgress> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 7;
    public Msg_G2C_LoadingProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_G2C_LoadingProgress(Msg_G2C_LoadingProgress other) : this() {
      progress_ = other.progress_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_G2C_LoadingProgress Clone() {
      return new Msg_G2C_LoadingProgress(this);
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_progress_codec
        = pb::FieldCodec.ForSInt32(10);
    private readonly pbc::RepeatedField<int> progress_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Progress {
      get { return progress_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_G2C_LoadingProgress);
    }

    public bool Equals(Msg_G2C_LoadingProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!progress_.Equals(other.progress_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= progress_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      progress_.WriteTo(output, _repeated_progress_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += progress_.CalculateSize(_repeated_progress_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_G2C_LoadingProgress other) {
      if (other == null) {
        return;
      }
      progress_.Add(other.progress_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            progress_.AddEntriesFrom(input, _repeated_progress_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///客户端加载完毕
  /// </summary>
  public sealed partial class Msg_G2C_AllFinishedLoaded : pb::IMessage<Msg_G2C_AllFinishedLoaded>
  {
    private static readonly pb::MessageParser<Msg_G2C_AllFinishedLoaded> _parser = new pb::MessageParser<Msg_G2C_AllFinishedLoaded>(() => new Msg_G2C_AllFinishedLoaded());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_G2C_AllFinishedLoaded> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 8;
    public Msg_G2C_AllFinishedLoaded() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_G2C_AllFinishedLoaded(Msg_G2C_AllFinishedLoaded other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_G2C_AllFinishedLoaded Clone() {
      return new Msg_G2C_AllFinishedLoaded(this);
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_G2C_AllFinishedLoaded);
    }

    public bool Equals(Msg_G2C_AllFinishedLoaded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_G2C_AllFinishedLoaded other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }
  }

  /// <summary>
  ///9
  /// </summary>
  public sealed partial class Msg_RepMissFrame : pb::IMessage<Msg_RepMissFrame>
  {
    private static readonly pb::MessageParser<Msg_RepMissFrame> _parser = new pb::MessageParser<Msg_RepMissFrame>(() => new Msg_RepMissFrame());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_RepMissFrame> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 9;
    public Msg_RepMissFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_RepMissFrame(Msg_RepMissFrame other) : this() {
      startTick_ = other.startTick_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_RepMissFrame Clone() {
      return new Msg_RepMissFrame(this);
    }

    /// <summary>Field number for the "startTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::pbnet.ServerFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::pbnet.ServerFrame.Parser);
    private readonly pbc::RepeatedField<global::pbnet.ServerFrame> frames_ = new pbc::RepeatedField<global::pbnet.ServerFrame>();
    public pbc::RepeatedField<global::pbnet.ServerFrame> Frames {
      get { return frames_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_RepMissFrame);
    }

    public bool Equals(Msg_RepMissFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(StartTick);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartTick);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_RepMissFrame other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTick = input.ReadSInt32();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///10
  /// </summary>
  public sealed partial class G2C_LoginSuccess : pb::IMessage<G2C_LoginSuccess>
  {
    private static readonly pb::MessageParser<G2C_LoginSuccess> _parser = new pb::MessageParser<G2C_LoginSuccess>(() => new G2C_LoginSuccess());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<G2C_LoginSuccess> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 10;
    public G2C_LoginSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    public G2C_LoginSuccess(G2C_LoginSuccess other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public G2C_LoginSuccess Clone() {
      return new G2C_LoginSuccess(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::pbnet.RespPlayerInfo info_;
    public global::pbnet.RespPlayerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as G2C_LoginSuccess);
    }

    public bool Equals(G2C_LoginSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(G2C_LoginSuccess other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::pbnet.RespPlayerInfo();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::pbnet.RespPlayerInfo();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }
  }

  #endregion

}

#endregion Designer generated code
