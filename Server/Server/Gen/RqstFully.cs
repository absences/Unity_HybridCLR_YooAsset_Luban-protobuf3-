// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RqstFully.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace pbnet {

  #region Enums
  public enum MessageID {
    MgsNone = 0,
    /// <summary>
    /// 下线通知
    /// </summary>
    MsgDisconnectNotify = 1000,
    /// <summary>
    /// 登录请求
    /// </summary>
    MsgLoginRequest = 1001,
    /// <summary>
    /// 登录响应
    /// </summary>
    MsgLoginReply = 1002,
  }

  #endregion

  #region Messages
  /// <summary>
  ///测试1
  /// </summary>
  public sealed partial class ReqRegInfo : pb::IMessage<ReqRegInfo>
  {
    private static readonly pb::MessageParser<ReqRegInfo> _parser = new pb::MessageParser<ReqRegInfo>(() => new ReqRegInfo());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ReqRegInfo> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 1;
    public ReqRegInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReqRegInfo(ReqRegInfo other) : this() {
      name_ = other.name_;
      adult_ = other.adult_;
      year_ = other.year_;
      roleID_ = other.roleID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ReqRegInfo Clone() {
      return new ReqRegInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adult" field.</summary>
    public const int AdultFieldNumber = 2;
    private bool adult_;
    /// <summary>
    ///成年
    /// </summary>
    public bool Adult {
      get { return adult_; }
      set {
        adult_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 3;
    private int year_;
    /// <summary>
    /// 年龄
    /// </summary>
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "roleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private int roleID_;
    public int RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ReqRegInfo);
    }

    public bool Equals(ReqRegInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Adult != other.Adult) return false;
      if (Year != other.Year) return false;
      if (RoleID != other.RoleID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Adult != false) hash ^= Adult.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Adult != false) {
        output.WriteRawTag(16);
        output.WriteBool(Adult);
      }
      if (Year != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Year);
      }
      if (RoleID != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(RoleID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Adult != false) {
        size += 1 + 1;
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Year);
      }
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RoleID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ReqRegInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Adult != false) {
        Adult = other.Adult;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Adult = input.ReadBool();
            break;
          }
          case 24: {
            Year = input.ReadSInt32();
            break;
          }
          case 32: {
            RoleID = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///2
  /// </summary>
  public sealed partial class C2G_PlayerPing : pb::IMessage<C2G_PlayerPing>
  {
    private static readonly pb::MessageParser<C2G_PlayerPing> _parser = new pb::MessageParser<C2G_PlayerPing>(() => new C2G_PlayerPing());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_PlayerPing> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 2;
    public C2G_PlayerPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_PlayerPing(C2G_PlayerPing other) : this() {
      localId_ = other.localId_;
      sendTimestamp_ = other.sendTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_PlayerPing Clone() {
      return new C2G_PlayerPing(this);
    }

    /// <summary>Field number for the "localId" field.</summary>
    public const int LocalIdFieldNumber = 1;
    private int localId_;
    public int LocalId {
      get { return localId_; }
      set {
        localId_ = value;
      }
    }

    /// <summary>Field number for the "sendTimestamp" field.</summary>
    public const int SendTimestampFieldNumber = 2;
    private long sendTimestamp_;
    public long SendTimestamp {
      get { return sendTimestamp_; }
      set {
        sendTimestamp_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_PlayerPing);
    }

    public bool Equals(C2G_PlayerPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalId != other.LocalId) return false;
      if (SendTimestamp != other.SendTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (LocalId != 0) hash ^= LocalId.GetHashCode();
      if (SendTimestamp != 0L) hash ^= SendTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalId != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LocalId);
      }
      if (SendTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(SendTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LocalId);
      }
      if (SendTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SendTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_PlayerPing other) {
      if (other == null) {
        return;
      }
      if (other.LocalId != 0) {
        LocalId = other.LocalId;
      }
      if (other.SendTimestamp != 0L) {
        SendTimestamp = other.SendTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocalId = input.ReadSInt32();
            break;
          }
          case 16: {
            SendTimestamp = input.ReadSInt64();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///4
  /// </summary>
  public sealed partial class Msg_HashCode : pb::IMessage<Msg_HashCode>
  {
    private static readonly pb::MessageParser<Msg_HashCode> _parser = new pb::MessageParser<Msg_HashCode>(() => new Msg_HashCode());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_HashCode> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 4;
    public Msg_HashCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_HashCode(Msg_HashCode other) : this() {
      startTick_ = other.startTick_;
      hashCodes_ = other.hashCodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_HashCode Clone() {
      return new Msg_HashCode(this);
    }

    /// <summary>Field number for the "StartTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    /// <summary>Field number for the "HashCodes" field.</summary>
    public const int HashCodesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hashCodes_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> hashCodes_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> HashCodes {
      get { return hashCodes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_HashCode);
    }

    public bool Equals(Msg_HashCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      if(!hashCodes_.Equals(other.hashCodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      hash ^= hashCodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(StartTick);
      }
      hashCodes_.WriteTo(output, _repeated_hashCodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartTick);
      }
      size += hashCodes_.CalculateSize(_repeated_hashCodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_HashCode other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      hashCodes_.Add(other.hashCodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTick = input.ReadSInt32();
            break;
          }
          case 18:
          case 16: {
            hashCodes_.AddEntriesFrom(input, _repeated_hashCodes_codec);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  /// [进度百分比 1表示1% 100表示已经加载完成]
  /// </summary>
  public sealed partial class C2G_LoadingProgress : pb::IMessage<C2G_LoadingProgress>
  {
    private static readonly pb::MessageParser<C2G_LoadingProgress> _parser = new pb::MessageParser<C2G_LoadingProgress>(() => new C2G_LoadingProgress());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_LoadingProgress> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 5;
    public C2G_LoadingProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_LoadingProgress(C2G_LoadingProgress other) : this() {
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_LoadingProgress Clone() {
      return new C2G_LoadingProgress(this);
    }

    /// <summary>Field number for the "Progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private int progress_;
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_LoadingProgress);
    }

    public bool Equals(C2G_LoadingProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Progress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_LoadingProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Progress = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///6
  /// </summary>
  public sealed partial class C2G_ReqMissFrame : pb::IMessage<C2G_ReqMissFrame>
  {
    private static readonly pb::MessageParser<C2G_ReqMissFrame> _parser = new pb::MessageParser<C2G_ReqMissFrame>(() => new C2G_ReqMissFrame());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_ReqMissFrame> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 6;
    public C2G_ReqMissFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_ReqMissFrame(C2G_ReqMissFrame other) : this() {
      startTick_ = other.startTick_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_ReqMissFrame Clone() {
      return new C2G_ReqMissFrame(this);
    }

    /// <summary>Field number for the "StartTick" field.</summary>
    public const int StartTickFieldNumber = 1;
    private int startTick_;
    public int StartTick {
      get { return startTick_; }
      set {
        startTick_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_ReqMissFrame);
    }

    public bool Equals(C2G_ReqMissFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTick != other.StartTick) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTick != 0) hash ^= StartTick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(StartTick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartTick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_ReqMissFrame other) {
      if (other == null) {
        return;
      }
      if (other.StartTick != 0) {
        StartTick = other.StartTick;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTick = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///7
  /// </summary>
  public sealed partial class C2G_RepMissFrameAck : pb::IMessage<C2G_RepMissFrameAck>
  {
    private static readonly pb::MessageParser<C2G_RepMissFrameAck> _parser = new pb::MessageParser<C2G_RepMissFrameAck>(() => new C2G_RepMissFrameAck());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_RepMissFrameAck> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 7;
    public C2G_RepMissFrameAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_RepMissFrameAck(C2G_RepMissFrameAck other) : this() {
      missFrameTick_ = other.missFrameTick_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_RepMissFrameAck Clone() {
      return new C2G_RepMissFrameAck(this);
    }

    /// <summary>Field number for the "MissFrameTick" field.</summary>
    public const int MissFrameTickFieldNumber = 1;
    private int missFrameTick_;
    public int MissFrameTick {
      get { return missFrameTick_; }
      set {
        missFrameTick_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_RepMissFrameAck);
    }

    public bool Equals(C2G_RepMissFrameAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissFrameTick != other.MissFrameTick) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MissFrameTick != 0) hash ^= MissFrameTick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MissFrameTick != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MissFrameTick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MissFrameTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MissFrameTick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_RepMissFrameAck other) {
      if (other == null) {
        return;
      }
      if (other.MissFrameTick != 0) {
        MissFrameTick = other.MissFrameTick;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissFrameTick = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///8
  /// </summary>
  public sealed partial class Msg_PlayerInput : pb::IMessage<Msg_PlayerInput>
  {
    private static readonly pb::MessageParser<Msg_PlayerInput> _parser = new pb::MessageParser<Msg_PlayerInput>(() => new Msg_PlayerInput());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Msg_PlayerInput> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 8;
    public Msg_PlayerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Msg_PlayerInput(Msg_PlayerInput other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Msg_PlayerInput Clone() {
      return new Msg_PlayerInput(this);
    }

    /// <summary>Field number for the "Input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::pbnet.PlayerInput input_;
    public global::pbnet.PlayerInput Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Msg_PlayerInput);
    }

    public bool Equals(Msg_PlayerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Msg_PlayerInput other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::pbnet.PlayerInput();
        }
        Input.MergeFrom(other.Input);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::pbnet.PlayerInput();
            }
            input.ReadMessage(Input);
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///CreateRoom
  /// </summary>
  public sealed partial class C2G_JoinRoom : pb::IMessage<C2G_JoinRoom>
  {
    private static readonly pb::MessageParser<C2G_JoinRoom> _parser = new pb::MessageParser<C2G_JoinRoom>(() => new C2G_JoinRoom());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_JoinRoom> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 9;
    public C2G_JoinRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_JoinRoom(C2G_JoinRoom other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_JoinRoom Clone() {
      return new C2G_JoinRoom(this);
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_JoinRoom);
    }

    public bool Equals(C2G_JoinRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_JoinRoom other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }
  }

  /// <summary>
  ///10
  /// </summary>
  public sealed partial class C2G_HeartNeat : pb::IMessage<C2G_HeartNeat>
  {
    private static readonly pb::MessageParser<C2G_HeartNeat> _parser = new pb::MessageParser<C2G_HeartNeat>(() => new C2G_HeartNeat());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<C2G_HeartNeat> Parser { get { return _parser; } }

    /// <summary>协议ID </summary>
    public const int ID = 10;
    public C2G_HeartNeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    public C2G_HeartNeat(C2G_HeartNeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public C2G_HeartNeat Clone() {
      return new C2G_HeartNeat(this);
    }

    public override bool Equals(object other) {
      return Equals(other as C2G_HeartNeat);
    }

    public bool Equals(C2G_HeartNeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(C2G_HeartNeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }
  }

  #endregion

}

#endregion Designer generated code
