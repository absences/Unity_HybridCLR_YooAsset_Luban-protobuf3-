// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace pbnet {

  #region Messages
  /// <summary>
  /// vector
  /// </summary>
  public sealed partial class PVector : pb::IMessage<PVector>
  {
    private static readonly pb::MessageParser<PVector> _parser = new pb::MessageParser<PVector>(() => new PVector());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<PVector> Parser { get { return _parser; } }

    public PVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PVector(PVector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public PVector Clone() {
      return new PVector(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PVector);
    }

    public bool Equals(PVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(PVector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadSInt32();
            break;
          }
          case 16: {
            Y = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  /// <summary>
  ///玩家输入
  /// </summary>
  public sealed partial class FInput : pb::IMessage<FInput>
  {
    private static readonly pb::MessageParser<FInput> _parser = new pb::MessageParser<FInput>(() => new FInput());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<FInput> Parser { get { return _parser; } }

    public FInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FInput(FInput other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      skillIdx_ = other.skillIdx_;
      actionIdx_ = other.actionIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public FInput Clone() {
      return new FInput(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::pbnet.PVector input_;
    public global::pbnet.PVector Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "skillIdx" field.</summary>
    public const int SkillIdxFieldNumber = 2;
    private int skillIdx_;
    /// <summary>
    ///技能在自身技能表里的索引
    /// </summary>
    public int SkillIdx {
      get { return skillIdx_; }
      set {
        skillIdx_ = value;
      }
    }

    /// <summary>Field number for the "actionIdx" field.</summary>
    public const int ActionIdxFieldNumber = 3;
    private int actionIdx_;
    /// <summary>
    ///播放角色动画
    /// </summary>
    public int ActionIdx {
      get { return actionIdx_; }
      set {
        actionIdx_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FInput);
    }

    public bool Equals(FInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (SkillIdx != other.SkillIdx) return false;
      if (ActionIdx != other.ActionIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (SkillIdx != 0) hash ^= SkillIdx.GetHashCode();
      if (ActionIdx != 0) hash ^= ActionIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (SkillIdx != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(SkillIdx);
      }
      if (ActionIdx != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ActionIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (SkillIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SkillIdx);
      }
      if (ActionIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActionIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(FInput other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::pbnet.PVector();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.SkillIdx != 0) {
        SkillIdx = other.SkillIdx;
      }
      if (other.ActionIdx != 0) {
        ActionIdx = other.ActionIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::pbnet.PVector();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            SkillIdx = input.ReadSInt32();
            break;
          }
          case 24: {
            ActionIdx = input.ReadSInt32();
            break;
          }
        }
      }
    }
  }

  public sealed partial class PlayerInput : pb::IMessage<PlayerInput>
  {
    private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

    public PlayerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PlayerInput(PlayerInput other) : this() {
      commands_ = other.commands_.Clone();
      isMiss_ = other.isMiss_;
      actorId_ = other.actorId_;
      tick_ = other.tick_;
      timeSinceStartUp_ = other.timeSinceStartUp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public PlayerInput Clone() {
      return new PlayerInput(this);
    }

    /// <summary>Field number for the "Commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_commands_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> commands_ = new pbc::RepeatedField<pb::ByteString>();
    public pbc::RepeatedField<pb::ByteString> Commands {
      get { return commands_; }
    }

    /// <summary>Field number for the "IsMiss" field.</summary>
    public const int IsMissFieldNumber = 2;
    private bool isMiss_;
    /// <summary>
    ///玩家无效输入
    /// </summary>
    public bool IsMiss {
      get { return isMiss_; }
      set {
        isMiss_ = value;
      }
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "Tick" field.</summary>
    public const int TickFieldNumber = 4;
    private int tick_;
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "timeSinceStartUp" field.</summary>
    public const int TimeSinceStartUpFieldNumber = 5;
    private float timeSinceStartUp_;
    public float TimeSinceStartUp {
      get { return timeSinceStartUp_; }
      set {
        timeSinceStartUp_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PlayerInput);
    }

    public bool Equals(PlayerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      if (IsMiss != other.IsMiss) return false;
      if (ActorId != other.ActorId) return false;
      if (Tick != other.Tick) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeSinceStartUp, other.TimeSinceStartUp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (IsMiss != false) hash ^= IsMiss.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (TimeSinceStartUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeSinceStartUp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (IsMiss != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsMiss);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ActorId);
      }
      if (Tick != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Tick);
      }
      if (TimeSinceStartUp != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TimeSinceStartUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (IsMiss != false) {
        size += 1 + 1;
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ActorId);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Tick);
      }
      if (TimeSinceStartUp != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(PlayerInput other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      if (other.IsMiss != false) {
        IsMiss = other.IsMiss;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.TimeSinceStartUp != 0F) {
        TimeSinceStartUp = other.TimeSinceStartUp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
          case 16: {
            IsMiss = input.ReadBool();
            break;
          }
          case 24: {
            ActorId = input.ReadSInt32();
            break;
          }
          case 32: {
            Tick = input.ReadSInt32();
            break;
          }
          case 45: {
            TimeSinceStartUp = input.ReadFloat();
            break;
          }
        }
      }
    }
  }

  #endregion

}

#endregion Designer generated code
