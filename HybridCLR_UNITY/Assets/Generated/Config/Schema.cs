// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pb_proto/schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Cfg {

  #region Enums
  public enum ItemEQuality {
    EmptyPlaceholder = 0,
    White = 1,
    Blue = 2,
    Purple = 3,
    Red = 4,
  }

  public enum TestAccessFlag {
    EmptyPlaceholder = 0,
    Write = 1,
    Read = 2,
    Truncate = 4,
    New = 8,
    ReadWrite = 3,
  }

  public enum EntityType {
    EmptyPlaceholder = 0,
    Enemy = 1,
    Player = 2,
    Spawner = 3,
  }

  public enum ColliderLayer {
    EmptyPlaceholder = 0,
    Static = 1,
    Enemy = 2,
    Hero = 4,
    StaticEnemy = 3,
    StaticHero = 5,
    EnemyHero = 6,
    StaticEnemyHero = 7,
  }

  public enum EShape2D {
    EmptyPlaceholder = 0,
    Segment = 1,
    Ray = 2,
    Circle = 3,
    Aabb = 4,
    Obb = 5,
    Polygon = 6,
  }

  #endregion

  #region Messages
  public sealed partial class L10nLanPatch : pb::IMessage<L10nLanPatch>
  {
    private static readonly pb::MessageParser<L10nLanPatch> _parser = new pb::MessageParser<L10nLanPatch>(() => new L10nLanPatch());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<L10nLanPatch> Parser { get { return _parser; } }

    public L10nLanPatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    public L10nLanPatch(L10nLanPatch other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public L10nLanPatch Clone() {
      return new L10nLanPatch(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as L10nLanPatch);
    }

    public bool Equals(L10nLanPatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(L10nLanPatch other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityConfig : pb::IMessage<EntityConfig>
  {
    private static readonly pb::MessageParser<EntityConfig> _parser = new pb::MessageParser<EntityConfig>(() => new EntityConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<EntityConfig> Parser { get { return _parser; } }

    public EntityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EntityConfig(EntityConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      assetId_ = other.assetId_;
      skillID_ = other.skillID_;
      initHp_ = other.initHp_;
      maxHp_ = other.maxHp_;
      basicLifeRecovery_ = other.basicLifeRecovery_;
      moveSpeed_ = other.moveSpeed_;
      entityGroupId_ = other.entityGroupId_;
      colliderLayer_ = other.colliderLayer_;
      colliderData_ = other.colliderData_ != null ? other.colliderData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public EntityConfig Clone() {
      return new EntityConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AssetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private int assetId_;
    public int AssetId {
      get { return assetId_; }
      set {
        assetId_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 4;
    private int skillID_;
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "initHp" field.</summary>
    public const int InitHpFieldNumber = 5;
    private int initHp_;
    public int InitHp {
      get { return initHp_; }
      set {
        initHp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 6;
    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "basicLifeRecovery" field.</summary>
    public const int BasicLifeRecoveryFieldNumber = 7;
    private int basicLifeRecovery_;
    public int BasicLifeRecovery {
      get { return basicLifeRecovery_; }
      set {
        basicLifeRecovery_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 8;
    private int moveSpeed_;
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "EntityGroupId" field.</summary>
    public const int EntityGroupIdFieldNumber = 9;
    private int entityGroupId_;
    public int EntityGroupId {
      get { return entityGroupId_; }
      set {
        entityGroupId_ = value;
      }
    }

    /// <summary>Field number for the "ColliderLayer" field.</summary>
    public const int ColliderLayerFieldNumber = 10;
    private global::Cfg.ColliderLayer colliderLayer_ = global::Cfg.ColliderLayer.EmptyPlaceholder;
    public global::Cfg.ColliderLayer ColliderLayer {
      get { return colliderLayer_; }
      set {
        colliderLayer_ = value;
      }
    }

    /// <summary>Field number for the "colliderData" field.</summary>
    public const int ColliderDataFieldNumber = 11;
    private global::Cfg.ColliderColliderData colliderData_;
    public global::Cfg.ColliderColliderData ColliderData {
      get { return colliderData_; }
      set {
        colliderData_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EntityConfig);
    }

    public bool Equals(EntityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (AssetId != other.AssetId) return false;
      if (SkillID != other.SkillID) return false;
      if (InitHp != other.InitHp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (BasicLifeRecovery != other.BasicLifeRecovery) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (EntityGroupId != other.EntityGroupId) return false;
      if (ColliderLayer != other.ColliderLayer) return false;
      if (!object.Equals(ColliderData, other.ColliderData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AssetId != 0) hash ^= AssetId.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (InitHp != 0) hash ^= InitHp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (BasicLifeRecovery != 0) hash ^= BasicLifeRecovery.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (EntityGroupId != 0) hash ^= EntityGroupId.GetHashCode();
      if (ColliderLayer != global::Cfg.ColliderLayer.EmptyPlaceholder) hash ^= ColliderLayer.GetHashCode();
      if (colliderData_ != null) hash ^= ColliderData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AssetId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AssetId);
      }
      if (SkillID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkillID);
      }
      if (InitHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InitHp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxHp);
      }
      if (BasicLifeRecovery != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BasicLifeRecovery);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MoveSpeed);
      }
      if (EntityGroupId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EntityGroupId);
      }
      if (ColliderLayer != global::Cfg.ColliderLayer.EmptyPlaceholder) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ColliderLayer);
      }
      if (colliderData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ColliderData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AssetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (InitHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitHp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (BasicLifeRecovery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BasicLifeRecovery);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (EntityGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityGroupId);
      }
      if (ColliderLayer != global::Cfg.ColliderLayer.EmptyPlaceholder) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColliderLayer);
      }
      if (colliderData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColliderData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(EntityConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AssetId != 0) {
        AssetId = other.AssetId;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.InitHp != 0) {
        InitHp = other.InitHp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.BasicLifeRecovery != 0) {
        BasicLifeRecovery = other.BasicLifeRecovery;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.EntityGroupId != 0) {
        EntityGroupId = other.EntityGroupId;
      }
      if (other.ColliderLayer != global::Cfg.ColliderLayer.EmptyPlaceholder) {
        ColliderLayer = other.ColliderLayer;
      }
      if (other.colliderData_ != null) {
        if (colliderData_ == null) {
          ColliderData = new global::Cfg.ColliderColliderData();
        }
        ColliderData.MergeFrom(other.ColliderData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AssetId = input.ReadInt32();
            break;
          }
          case 32: {
            SkillID = input.ReadInt32();
            break;
          }
          case 40: {
            InitHp = input.ReadInt32();
            break;
          }
          case 48: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 56: {
            BasicLifeRecovery = input.ReadInt32();
            break;
          }
          case 64: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 72: {
            EntityGroupId = input.ReadInt32();
            break;
          }
          case 80: {
            ColliderLayer = (global::Cfg.ColliderLayer) input.ReadEnum();
            break;
          }
          case 90: {
            if (colliderData_ == null) {
              ColliderData = new global::Cfg.ColliderColliderData();
            }
            input.ReadMessage(ColliderData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderColliderData : pb::IMessage<ColliderColliderData>
  {
    private static readonly pb::MessageParser<ColliderColliderData> _parser = new pb::MessageParser<ColliderColliderData>(() => new ColliderColliderData());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderColliderData> Parser { get { return _parser; } }

    public ColliderColliderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderColliderData(ColliderColliderData other) : this() {
      offest_ = other.offest_ != null ? other.offest_.Clone() : null;
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderColliderData Clone() {
      return new ColliderColliderData(this);
    }

    /// <summary>Field number for the "offest" field.</summary>
    public const int OffestFieldNumber = 1;
    private global::Cfg.Lmathvector2 offest_;
    public global::Cfg.Lmathvector2 Offest {
      get { return offest_; }
      set {
        offest_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private global::Cfg.ColliderShape2D shape_;
    public global::Cfg.ColliderShape2D Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderColliderData);
    }

    public bool Equals(ColliderColliderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offest, other.Offest)) return false;
      if (!object.Equals(Shape, other.Shape)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (offest_ != null) hash ^= Offest.GetHashCode();
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (offest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offest);
      }
      if (shape_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (offest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offest);
      }
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderColliderData other) {
      if (other == null) {
        return;
      }
      if (other.offest_ != null) {
        if (offest_ == null) {
          Offest = new global::Cfg.Lmathvector2();
        }
        Offest.MergeFrom(other.Offest);
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          Shape = new global::Cfg.ColliderShape2D();
        }
        Shape.MergeFrom(other.Shape);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offest_ == null) {
              Offest = new global::Cfg.Lmathvector2();
            }
            input.ReadMessage(Offest);
            break;
          }
          case 18: {
            if (shape_ == null) {
              Shape = new global::Cfg.ColliderShape2D();
            }
            input.ReadMessage(Shape);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lmathvector2 : pb::IMessage<Lmathvector2>
  {
    private static readonly pb::MessageParser<Lmathvector2> _parser = new pb::MessageParser<Lmathvector2>(() => new Lmathvector2());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Lmathvector2> Parser { get { return _parser; } }

    public Lmathvector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Lmathvector2(Lmathvector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Lmathvector2 Clone() {
      return new Lmathvector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Lmathvector2);
    }

    public bool Equals(Lmathvector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Lmathvector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderShape2D : pb::IMessage<ColliderShape2D>
  {
    private static readonly pb::MessageParser<ColliderShape2D> _parser = new pb::MessageParser<ColliderShape2D>(() => new ColliderShape2D());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderShape2D> Parser { get { return _parser; } }

    public ColliderShape2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderShape2D(ColliderShape2D other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Segment:
          Segment = other.Segment.Clone();
          break;
        case ValueOneofCase.Ray:
          Ray = other.Ray.Clone();
          break;
        case ValueOneofCase.Circle:
          Circle = other.Circle.Clone();
          break;
        case ValueOneofCase.AABB:
          AABB = other.AABB.Clone();
          break;
        case ValueOneofCase.OBB:
          OBB = other.OBB.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderShape2D Clone() {
      return new ColliderShape2D(this);
    }

    /// <summary>Field number for the "Segment" field.</summary>
    public const int SegmentFieldNumber = 1;
    public global::Cfg.ColliderSegment Segment {
      get { return valueCase_ == ValueOneofCase.Segment ? (global::Cfg.ColliderSegment) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Segment;
      }
    }

    /// <summary>Field number for the "Ray" field.</summary>
    public const int RayFieldNumber = 2;
    public global::Cfg.ColliderRay Ray {
      get { return valueCase_ == ValueOneofCase.Ray ? (global::Cfg.ColliderRay) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Ray;
      }
    }

    /// <summary>Field number for the "Circle" field.</summary>
    public const int CircleFieldNumber = 3;
    public global::Cfg.ColliderCircle Circle {
      get { return valueCase_ == ValueOneofCase.Circle ? (global::Cfg.ColliderCircle) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Circle;
      }
    }

    /// <summary>Field number for the "AABB" field.</summary>
    public const int AABBFieldNumber = 4;
    public global::Cfg.ColliderAABB AABB {
      get { return valueCase_ == ValueOneofCase.AABB ? (global::Cfg.ColliderAABB) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.AABB;
      }
    }

    /// <summary>Field number for the "OBB" field.</summary>
    public const int OBBFieldNumber = 5;
    public global::Cfg.ColliderOBB OBB {
      get { return valueCase_ == ValueOneofCase.OBB ? (global::Cfg.ColliderOBB) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OBB;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Segment = 1,
      Ray = 2,
      Circle = 3,
      AABB = 4,
      OBB = 5,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderShape2D);
    }

    public bool Equals(ColliderShape2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Segment, other.Segment)) return false;
      if (!object.Equals(Ray, other.Ray)) return false;
      if (!object.Equals(Circle, other.Circle)) return false;
      if (!object.Equals(AABB, other.AABB)) return false;
      if (!object.Equals(OBB, other.OBB)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Segment) hash ^= Segment.GetHashCode();
      if (valueCase_ == ValueOneofCase.Ray) hash ^= Ray.GetHashCode();
      if (valueCase_ == ValueOneofCase.Circle) hash ^= Circle.GetHashCode();
      if (valueCase_ == ValueOneofCase.AABB) hash ^= AABB.GetHashCode();
      if (valueCase_ == ValueOneofCase.OBB) hash ^= OBB.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Segment) {
        output.WriteRawTag(10);
        output.WriteMessage(Segment);
      }
      if (valueCase_ == ValueOneofCase.Ray) {
        output.WriteRawTag(18);
        output.WriteMessage(Ray);
      }
      if (valueCase_ == ValueOneofCase.Circle) {
        output.WriteRawTag(26);
        output.WriteMessage(Circle);
      }
      if (valueCase_ == ValueOneofCase.AABB) {
        output.WriteRawTag(34);
        output.WriteMessage(AABB);
      }
      if (valueCase_ == ValueOneofCase.OBB) {
        output.WriteRawTag(42);
        output.WriteMessage(OBB);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Segment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Segment);
      }
      if (valueCase_ == ValueOneofCase.Ray) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ray);
      }
      if (valueCase_ == ValueOneofCase.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Circle);
      }
      if (valueCase_ == ValueOneofCase.AABB) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AABB);
      }
      if (valueCase_ == ValueOneofCase.OBB) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OBB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderShape2D other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Segment:
          if (Segment == null) {
            Segment = new global::Cfg.ColliderSegment();
          }
          Segment.MergeFrom(other.Segment);
          break;
        case ValueOneofCase.Ray:
          if (Ray == null) {
            Ray = new global::Cfg.ColliderRay();
          }
          Ray.MergeFrom(other.Ray);
          break;
        case ValueOneofCase.Circle:
          if (Circle == null) {
            Circle = new global::Cfg.ColliderCircle();
          }
          Circle.MergeFrom(other.Circle);
          break;
        case ValueOneofCase.AABB:
          if (AABB == null) {
            AABB = new global::Cfg.ColliderAABB();
          }
          AABB.MergeFrom(other.AABB);
          break;
        case ValueOneofCase.OBB:
          if (OBB == null) {
            OBB = new global::Cfg.ColliderOBB();
          }
          OBB.MergeFrom(other.OBB);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Cfg.ColliderSegment subBuilder = new global::Cfg.ColliderSegment();
            if (valueCase_ == ValueOneofCase.Segment) {
              subBuilder.MergeFrom(Segment);
            }
            input.ReadMessage(subBuilder);
            Segment = subBuilder;
            break;
          }
          case 18: {
            global::Cfg.ColliderRay subBuilder = new global::Cfg.ColliderRay();
            if (valueCase_ == ValueOneofCase.Ray) {
              subBuilder.MergeFrom(Ray);
            }
            input.ReadMessage(subBuilder);
            Ray = subBuilder;
            break;
          }
          case 26: {
            global::Cfg.ColliderCircle subBuilder = new global::Cfg.ColliderCircle();
            if (valueCase_ == ValueOneofCase.Circle) {
              subBuilder.MergeFrom(Circle);
            }
            input.ReadMessage(subBuilder);
            Circle = subBuilder;
            break;
          }
          case 34: {
            global::Cfg.ColliderAABB subBuilder = new global::Cfg.ColliderAABB();
            if (valueCase_ == ValueOneofCase.AABB) {
              subBuilder.MergeFrom(AABB);
            }
            input.ReadMessage(subBuilder);
            AABB = subBuilder;
            break;
          }
          case 42: {
            global::Cfg.ColliderOBB subBuilder = new global::Cfg.ColliderOBB();
            if (valueCase_ == ValueOneofCase.OBB) {
              subBuilder.MergeFrom(OBB);
            }
            input.ReadMessage(subBuilder);
            OBB = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderSegment : pb::IMessage<ColliderSegment>
  {
    private static readonly pb::MessageParser<ColliderSegment> _parser = new pb::MessageParser<ColliderSegment>(() => new ColliderSegment());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderSegment> Parser { get { return _parser; } }

    public ColliderSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderSegment(ColliderSegment other) : this() {
      pos1_ = other.pos1_ != null ? other.pos1_.Clone() : null;
      pos2_ = other.pos2_ != null ? other.pos2_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderSegment Clone() {
      return new ColliderSegment(this);
    }

    /// <summary>Field number for the "pos1" field.</summary>
    public const int Pos1FieldNumber = 1;
    private global::Cfg.Lmathvector2 pos1_;
    public global::Cfg.Lmathvector2 Pos1 {
      get { return pos1_; }
      set {
        pos1_ = value;
      }
    }

    /// <summary>Field number for the "pos2" field.</summary>
    public const int Pos2FieldNumber = 2;
    private global::Cfg.Lmathvector2 pos2_;
    public global::Cfg.Lmathvector2 Pos2 {
      get { return pos2_; }
      set {
        pos2_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderSegment);
    }

    public bool Equals(ColliderSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos1, other.Pos1)) return false;
      if (!object.Equals(Pos2, other.Pos2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (pos1_ != null) hash ^= Pos1.GetHashCode();
      if (pos2_ != null) hash ^= Pos2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos1);
      }
      if (pos2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pos1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos1);
      }
      if (pos2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderSegment other) {
      if (other == null) {
        return;
      }
      if (other.pos1_ != null) {
        if (pos1_ == null) {
          Pos1 = new global::Cfg.Lmathvector2();
        }
        Pos1.MergeFrom(other.Pos1);
      }
      if (other.pos2_ != null) {
        if (pos2_ == null) {
          Pos2 = new global::Cfg.Lmathvector2();
        }
        Pos2.MergeFrom(other.Pos2);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos1_ == null) {
              Pos1 = new global::Cfg.Lmathvector2();
            }
            input.ReadMessage(Pos1);
            break;
          }
          case 18: {
            if (pos2_ == null) {
              Pos2 = new global::Cfg.Lmathvector2();
            }
            input.ReadMessage(Pos2);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderRay : pb::IMessage<ColliderRay>
  {
    private static readonly pb::MessageParser<ColliderRay> _parser = new pb::MessageParser<ColliderRay>(() => new ColliderRay());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderRay> Parser { get { return _parser; } }

    public ColliderRay() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderRay(ColliderRay other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      dir_ = other.dir_ != null ? other.dir_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderRay Clone() {
      return new ColliderRay(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cfg.Lmathvector2 pos_;
    public global::Cfg.Lmathvector2 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private global::Cfg.Lmathvector2 dir_;
    public global::Cfg.Lmathvector2 Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderRay);
    }

    public bool Equals(ColliderRay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (dir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderRay other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Cfg.Lmathvector2();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          Dir = new global::Cfg.Lmathvector2();
        }
        Dir.MergeFrom(other.Dir);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::Cfg.Lmathvector2();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (dir_ == null) {
              Dir = new global::Cfg.Lmathvector2();
            }
            input.ReadMessage(Dir);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderCircle : pb::IMessage<ColliderCircle>
  {
    private static readonly pb::MessageParser<ColliderCircle> _parser = new pb::MessageParser<ColliderCircle>(() => new ColliderCircle());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderCircle> Parser { get { return _parser; } }

    public ColliderCircle() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderCircle(ColliderCircle other) : this() {
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderCircle Clone() {
      return new ColliderCircle(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private int radius_;
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderCircle);
    }

    public bool Equals(ColliderCircle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderCircle other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Radius = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderAABB : pb::IMessage<ColliderAABB>
  {
    private static readonly pb::MessageParser<ColliderAABB> _parser = new pb::MessageParser<ColliderAABB>(() => new ColliderAABB());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderAABB> Parser { get { return _parser; } }

    public ColliderAABB() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderAABB(ColliderAABB other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderAABB Clone() {
      return new ColliderAABB(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderAABB);
    }

    public bool Equals(ColliderAABB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderAABB other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderOBB : pb::IMessage<ColliderOBB>
  {
    private static readonly pb::MessageParser<ColliderOBB> _parser = new pb::MessageParser<ColliderOBB>(() => new ColliderOBB());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<ColliderOBB> Parser { get { return _parser; } }

    public ColliderOBB() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColliderOBB(ColliderOBB other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      deg_ = other.deg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ColliderOBB Clone() {
      return new ColliderOBB(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "deg" field.</summary>
    public const int DegFieldNumber = 3;
    private int deg_;
    public int Deg {
      get { return deg_; }
      set {
        deg_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ColliderOBB);
    }

    public bool Equals(ColliderOBB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Deg != other.Deg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Deg != 0) hash ^= Deg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Deg != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Deg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Deg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ColliderOBB other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Deg != 0) {
        Deg = other.Deg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Deg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolParamConfig : pb::IMessage<PoolParamConfig>
  {
    private static readonly pb::MessageParser<PoolParamConfig> _parser = new pb::MessageParser<PoolParamConfig>(() => new PoolParamConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<PoolParamConfig> Parser { get { return _parser; } }

    public PoolParamConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PoolParamConfig(PoolParamConfig other) : this() {
      id_ = other.id_;
      groupName_ = other.groupName_;
      instanceAutoReleaseInterval_ = other.instanceAutoReleaseInterval_;
      instanceCapacity_ = other.instanceCapacity_;
      instanceExpireTime_ = other.instanceExpireTime_;
      instancePriority_ = other.instancePriority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public PoolParamConfig Clone() {
      return new PoolParamConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "GroupName" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstanceAutoReleaseInterval" field.</summary>
    public const int InstanceAutoReleaseIntervalFieldNumber = 3;
    private float instanceAutoReleaseInterval_;
    public float InstanceAutoReleaseInterval {
      get { return instanceAutoReleaseInterval_; }
      set {
        instanceAutoReleaseInterval_ = value;
      }
    }

    /// <summary>Field number for the "InstanceCapacity" field.</summary>
    public const int InstanceCapacityFieldNumber = 4;
    private int instanceCapacity_;
    public int InstanceCapacity {
      get { return instanceCapacity_; }
      set {
        instanceCapacity_ = value;
      }
    }

    /// <summary>Field number for the "InstanceExpireTime" field.</summary>
    public const int InstanceExpireTimeFieldNumber = 5;
    private float instanceExpireTime_;
    public float InstanceExpireTime {
      get { return instanceExpireTime_; }
      set {
        instanceExpireTime_ = value;
      }
    }

    /// <summary>Field number for the "InstancePriority" field.</summary>
    public const int InstancePriorityFieldNumber = 6;
    private int instancePriority_;
    public int InstancePriority {
      get { return instancePriority_; }
      set {
        instancePriority_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PoolParamConfig);
    }

    public bool Equals(PoolParamConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GroupName != other.GroupName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstanceAutoReleaseInterval, other.InstanceAutoReleaseInterval)) return false;
      if (InstanceCapacity != other.InstanceCapacity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InstanceExpireTime, other.InstanceExpireTime)) return false;
      if (InstancePriority != other.InstancePriority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (InstanceAutoReleaseInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstanceAutoReleaseInterval);
      if (InstanceCapacity != 0) hash ^= InstanceCapacity.GetHashCode();
      if (InstanceExpireTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InstanceExpireTime);
      if (InstancePriority != 0) hash ^= InstancePriority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (InstanceAutoReleaseInterval != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InstanceAutoReleaseInterval);
      }
      if (InstanceCapacity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InstanceCapacity);
      }
      if (InstanceExpireTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(InstanceExpireTime);
      }
      if (InstancePriority != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InstancePriority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (InstanceAutoReleaseInterval != 0F) {
        size += 1 + 4;
      }
      if (InstanceCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceCapacity);
      }
      if (InstanceExpireTime != 0F) {
        size += 1 + 4;
      }
      if (InstancePriority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstancePriority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(PoolParamConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.InstanceAutoReleaseInterval != 0F) {
        InstanceAutoReleaseInterval = other.InstanceAutoReleaseInterval;
      }
      if (other.InstanceCapacity != 0) {
        InstanceCapacity = other.InstanceCapacity;
      }
      if (other.InstanceExpireTime != 0F) {
        InstanceExpireTime = other.InstanceExpireTime;
      }
      if (other.InstancePriority != 0) {
        InstancePriority = other.InstancePriority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 29: {
            InstanceAutoReleaseInterval = input.ReadFloat();
            break;
          }
          case 32: {
            InstanceCapacity = input.ReadInt32();
            break;
          }
          case 45: {
            InstanceExpireTime = input.ReadFloat();
            break;
          }
          case 48: {
            InstancePriority = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityGroupConfig : pb::IMessage<EntityGroupConfig>
  {
    private static readonly pb::MessageParser<EntityGroupConfig> _parser = new pb::MessageParser<EntityGroupConfig>(() => new EntityGroupConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<EntityGroupConfig> Parser { get { return _parser; } }

    public EntityGroupConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EntityGroupConfig(EntityGroupConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      poolParamId_ = other.poolParamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public EntityGroupConfig Clone() {
      return new EntityGroupConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PoolParamId" field.</summary>
    public const int PoolParamIdFieldNumber = 3;
    private int poolParamId_;
    public int PoolParamId {
      get { return poolParamId_; }
      set {
        poolParamId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EntityGroupConfig);
    }

    public bool Equals(EntityGroupConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (PoolParamId != other.PoolParamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PoolParamId != 0) hash ^= PoolParamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PoolParamId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PoolParamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PoolParamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolParamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(EntityGroupConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PoolParamId != 0) {
        PoolParamId = other.PoolParamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PoolParamId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssetsPathConfig : pb::IMessage<AssetsPathConfig>
  {
    private static readonly pb::MessageParser<AssetsPathConfig> _parser = new pb::MessageParser<AssetsPathConfig>(() => new AssetsPathConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<AssetsPathConfig> Parser { get { return _parser; } }

    public AssetsPathConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AssetsPathConfig(AssetsPathConfig other) : this() {
      id_ = other.id_;
      assetPath_ = other.assetPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public AssetsPathConfig Clone() {
      return new AssetsPathConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AssetPath" field.</summary>
    public const int AssetPathFieldNumber = 2;
    private string assetPath_ = "";
    public string AssetPath {
      get { return assetPath_; }
      set {
        assetPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AssetsPathConfig);
    }

    public bool Equals(AssetsPathConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AssetPath != other.AssetPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AssetPath.Length != 0) hash ^= AssetPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AssetPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AssetPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(AssetsPathConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AssetPath.Length != 0) {
        AssetPath = other.AssetPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            AssetPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollisionConfig : pb::IMessage<CollisionConfig>
  {
    private static readonly pb::MessageParser<CollisionConfig> _parser = new pb::MessageParser<CollisionConfig>(() => new CollisionConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<CollisionConfig> Parser { get { return _parser; } }

    public CollisionConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CollisionConfig(CollisionConfig other) : this() {
      collisionMatrix_ = other.collisionMatrix_.Clone();
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      worldSize_ = other.worldSize_;
      minNodeSize_ = other.minNodeSize_;
      loosenessval_ = other.loosenessval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public CollisionConfig Clone() {
      return new CollisionConfig(this);
    }

    /// <summary>Field number for the "collisionMatrix" field.</summary>
    public const int CollisionMatrixFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Cfg.ColliderLayer>.Codec _map_collisionMatrix_codec
        = new pbc::MapField<int, global::Cfg.ColliderLayer>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Cfg.ColliderLayer) x, global::Cfg.ColliderLayer.EmptyPlaceholder), 10);
    private readonly pbc::MapField<int, global::Cfg.ColliderLayer> collisionMatrix_ = new pbc::MapField<int, global::Cfg.ColliderLayer>();
    public pbc::MapField<int, global::Cfg.ColliderLayer> CollisionMatrix {
      get { return collisionMatrix_; }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cfg.Lmathvector3 pos_;
    public global::Cfg.Lmathvector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "worldSize" field.</summary>
    public const int WorldSizeFieldNumber = 3;
    private int worldSize_;
    public int WorldSize {
      get { return worldSize_; }
      set {
        worldSize_ = value;
      }
    }

    /// <summary>Field number for the "minNodeSize" field.</summary>
    public const int MinNodeSizeFieldNumber = 4;
    private int minNodeSize_;
    public int MinNodeSize {
      get { return minNodeSize_; }
      set {
        minNodeSize_ = value;
      }
    }

    /// <summary>Field number for the "loosenessval" field.</summary>
    public const int LoosenessvalFieldNumber = 5;
    private int loosenessval_;
    public int Loosenessval {
      get { return loosenessval_; }
      set {
        loosenessval_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CollisionConfig);
    }

    public bool Equals(CollisionConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CollisionMatrix.Equals(other.CollisionMatrix)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (WorldSize != other.WorldSize) return false;
      if (MinNodeSize != other.MinNodeSize) return false;
      if (Loosenessval != other.Loosenessval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= CollisionMatrix.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (WorldSize != 0) hash ^= WorldSize.GetHashCode();
      if (MinNodeSize != 0) hash ^= MinNodeSize.GetHashCode();
      if (Loosenessval != 0) hash ^= Loosenessval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      collisionMatrix_.WriteTo(output, _map_collisionMatrix_codec);
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (WorldSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WorldSize);
      }
      if (MinNodeSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinNodeSize);
      }
      if (Loosenessval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Loosenessval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += collisionMatrix_.CalculateSize(_map_collisionMatrix_codec);
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (WorldSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldSize);
      }
      if (MinNodeSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinNodeSize);
      }
      if (Loosenessval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Loosenessval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(CollisionConfig other) {
      if (other == null) {
        return;
      }
      collisionMatrix_.MergeFrom(other.collisionMatrix_);
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Cfg.Lmathvector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.WorldSize != 0) {
        WorldSize = other.WorldSize;
      }
      if (other.MinNodeSize != 0) {
        MinNodeSize = other.MinNodeSize;
      }
      if (other.Loosenessval != 0) {
        Loosenessval = other.Loosenessval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            collisionMatrix_.AddEntriesFrom(input, _map_collisionMatrix_codec);
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::Cfg.Lmathvector3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 24: {
            WorldSize = input.ReadInt32();
            break;
          }
          case 32: {
            MinNodeSize = input.ReadInt32();
            break;
          }
          case 40: {
            Loosenessval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lmathvector3 : pb::IMessage<Lmathvector3>
  {
    private static readonly pb::MessageParser<Lmathvector3> _parser = new pb::MessageParser<Lmathvector3>(() => new Lmathvector3());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Lmathvector3> Parser { get { return _parser; } }

    public Lmathvector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Lmathvector3(Lmathvector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Lmathvector3 Clone() {
      return new Lmathvector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Lmathvector3);
    }

    public bool Equals(Lmathvector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Lmathvector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInfoConfig : pb::IMessage<SkillInfoConfig>
  {
    private static readonly pb::MessageParser<SkillInfoConfig> _parser = new pb::MessageParser<SkillInfoConfig>(() => new SkillInfoConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<SkillInfoConfig> Parser { get { return _parser; } }

    public SkillInfoConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SkillInfoConfig(SkillInfoConfig other) : this() {
      id_ = other.id_;
      skills_ = other.skills_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SkillInfoConfig Clone() {
      return new SkillInfoConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Cfg.Heroskillitem>.Codec _map_skills_codec
        = new pbc::MapField<int, global::Cfg.Heroskillitem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Cfg.Heroskillitem.Parser), 18);
    private readonly pbc::MapField<int, global::Cfg.Heroskillitem> skills_ = new pbc::MapField<int, global::Cfg.Heroskillitem>();
    public pbc::MapField<int, global::Cfg.Heroskillitem> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SkillInfoConfig);
    }

    public bool Equals(SkillInfoConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Skills.Equals(other.Skills)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Skills.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      skills_.WriteTo(output, _map_skills_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += skills_.CalculateSize(_map_skills_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SkillInfoConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      skills_.MergeFrom(other.skills_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _map_skills_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroskillitem : pb::IMessage<Heroskillitem>
  {
    private static readonly pb::MessageParser<Heroskillitem> _parser = new pb::MessageParser<Heroskillitem>(() => new Heroskillitem());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<Heroskillitem> Parser { get { return _parser; } }

    public Heroskillitem() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Heroskillitem(Heroskillitem other) : this() {
      name_ = other.name_;
      asset_ = other.asset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public Heroskillitem Clone() {
      return new Heroskillitem(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 2;
    private int asset_;
    public int Asset {
      get { return asset_; }
      set {
        asset_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Heroskillitem);
    }

    public bool Equals(Heroskillitem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Asset != other.Asset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Asset != 0) hash ^= Asset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Asset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Asset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Asset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Asset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(Heroskillitem other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Asset != 0) {
        Asset = other.Asset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Asset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemTestConfig : pb::IMessage<ItemTestConfig>
  {
    private static readonly pb::MessageParser<ItemTestConfig> _parser = new pb::MessageParser<ItemTestConfig>(() => new ItemTestConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static pb::MessageParser<ItemTestConfig> Parser { get { return _parser; } }

    public ItemTestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ItemTestConfig(ItemTestConfig other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      desc_ = other.desc_;
      price_ = other.price_;
      expireTime_ = other.expireTime_;
      batchUseable_ = other.batchUseable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ItemTestConfig Clone() {
      return new ItemTestConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 5;
    private readonly static long ExpireTimeDefaultValue = 0L;

    private long expireTime_;
    public long ExpireTime {
      get { if ((_hasBits0 & 1) != 0) { return expireTime_; } else { return ExpireTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        expireTime_ = value;
      }
    }
    /// <summary>Gets whether the "expire_time" field is set</summary>
    public bool HasExpireTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "expire_time" field</summary>
    public void ClearExpireTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "batch_useable" field.</summary>
    public const int BatchUseableFieldNumber = 6;
    private bool batchUseable_;
    public bool BatchUseable {
      get { return batchUseable_; }
      set {
        batchUseable_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ItemTestConfig);
    }

    public bool Equals(ItemTestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (Price != other.Price) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (BatchUseable != other.BatchUseable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (HasExpireTime) hash ^= ExpireTime.GetHashCode();
      if (BatchUseable != false) hash ^= BatchUseable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (HasExpireTime) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireTime);
      }
      if (BatchUseable != false) {
        output.WriteRawTag(48);
        output.WriteBool(BatchUseable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (HasExpireTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (BatchUseable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ItemTestConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      if (other.BatchUseable != false) {
        BatchUseable = other.BatchUseable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 48: {
            BatchUseable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIEntityConfig : pb::IMessage<UIEntityConfig>
  {
    private static readonly pb::MessageParser<UIEntityConfig> _parser = new pb::MessageParser<UIEntityConfig>(() => new UIEntityConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<UIEntityConfig> Parser { get { return _parser; } }

    public UIEntityConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UIEntityConfig(UIEntityConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      assetId_ = other.assetId_;
      entityGroupId_ = other.entityGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public UIEntityConfig Clone() {
      return new UIEntityConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AssetId" field.</summary>
    public const int AssetIdFieldNumber = 3;
    private int assetId_;
    public int AssetId {
      get { return assetId_; }
      set {
        assetId_ = value;
      }
    }

    /// <summary>Field number for the "EntityGroupId" field.</summary>
    public const int EntityGroupIdFieldNumber = 4;
    private int entityGroupId_;
    public int EntityGroupId {
      get { return entityGroupId_; }
      set {
        entityGroupId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UIEntityConfig);
    }

    public bool Equals(UIEntityConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (AssetId != other.AssetId) return false;
      if (EntityGroupId != other.EntityGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AssetId != 0) hash ^= AssetId.GetHashCode();
      if (EntityGroupId != 0) hash ^= EntityGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AssetId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AssetId);
      }
      if (EntityGroupId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EntityGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AssetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
      }
      if (EntityGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(UIEntityConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AssetId != 0) {
        AssetId = other.AssetId;
      }
      if (other.EntityGroupId != 0) {
        EntityGroupId = other.EntityGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AssetId = input.ReadInt32();
            break;
          }
          case 32: {
            EntityGroupId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundConstantConfig : pb::IMessage<SoundConstantConfig>
  {
    private static readonly pb::MessageParser<SoundConstantConfig> _parser = new pb::MessageParser<SoundConstantConfig>(() => new SoundConstantConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<SoundConstantConfig> Parser { get { return _parser; } }

    public SoundConstantConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundConstantConfig(SoundConstantConfig other) : this() {
      defaultTime_ = other.defaultTime_;
      defaultMute_ = other.defaultMute_;
      defaultLoop_ = other.defaultLoop_;
      defaultPriority_ = other.defaultPriority_;
      defaultVolume_ = other.defaultVolume_;
      defaultFadeInSeconds_ = other.defaultFadeInSeconds_;
      defaultFadeOutSeconds_ = other.defaultFadeOutSeconds_;
      defaultPitch_ = other.defaultPitch_;
      defaultPanStereo_ = other.defaultPanStereo_;
      defaultSpatialBlend_ = other.defaultSpatialBlend_;
      defaultMaxDistance_ = other.defaultMaxDistance_;
      defaultDopplerLevel_ = other.defaultDopplerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundConstantConfig Clone() {
      return new SoundConstantConfig(this);
    }

    /// <summary>Field number for the "DefaultTime" field.</summary>
    public const int DefaultTimeFieldNumber = 1;
    private float defaultTime_;
    public float DefaultTime {
      get { return defaultTime_; }
      set {
        defaultTime_ = value;
      }
    }

    /// <summary>Field number for the "DefaultMute" field.</summary>
    public const int DefaultMuteFieldNumber = 2;
    private bool defaultMute_;
    public bool DefaultMute {
      get { return defaultMute_; }
      set {
        defaultMute_ = value;
      }
    }

    /// <summary>Field number for the "DefaultLoop" field.</summary>
    public const int DefaultLoopFieldNumber = 3;
    private bool defaultLoop_;
    public bool DefaultLoop {
      get { return defaultLoop_; }
      set {
        defaultLoop_ = value;
      }
    }

    /// <summary>Field number for the "DefaultPriority" field.</summary>
    public const int DefaultPriorityFieldNumber = 4;
    private int defaultPriority_;
    public int DefaultPriority {
      get { return defaultPriority_; }
      set {
        defaultPriority_ = value;
      }
    }

    /// <summary>Field number for the "DefaultVolume" field.</summary>
    public const int DefaultVolumeFieldNumber = 5;
    private float defaultVolume_;
    public float DefaultVolume {
      get { return defaultVolume_; }
      set {
        defaultVolume_ = value;
      }
    }

    /// <summary>Field number for the "DefaultFadeInSeconds" field.</summary>
    public const int DefaultFadeInSecondsFieldNumber = 6;
    private float defaultFadeInSeconds_;
    public float DefaultFadeInSeconds {
      get { return defaultFadeInSeconds_; }
      set {
        defaultFadeInSeconds_ = value;
      }
    }

    /// <summary>Field number for the "DefaultFadeOutSeconds" field.</summary>
    public const int DefaultFadeOutSecondsFieldNumber = 7;
    private float defaultFadeOutSeconds_;
    public float DefaultFadeOutSeconds {
      get { return defaultFadeOutSeconds_; }
      set {
        defaultFadeOutSeconds_ = value;
      }
    }

    /// <summary>Field number for the "DefaultPitch" field.</summary>
    public const int DefaultPitchFieldNumber = 8;
    private float defaultPitch_;
    public float DefaultPitch {
      get { return defaultPitch_; }
      set {
        defaultPitch_ = value;
      }
    }

    /// <summary>Field number for the "DefaultPanStereo" field.</summary>
    public const int DefaultPanStereoFieldNumber = 9;
    private float defaultPanStereo_;
    public float DefaultPanStereo {
      get { return defaultPanStereo_; }
      set {
        defaultPanStereo_ = value;
      }
    }

    /// <summary>Field number for the "DefaultSpatialBlend" field.</summary>
    public const int DefaultSpatialBlendFieldNumber = 10;
    private float defaultSpatialBlend_;
    public float DefaultSpatialBlend {
      get { return defaultSpatialBlend_; }
      set {
        defaultSpatialBlend_ = value;
      }
    }

    /// <summary>Field number for the "DefaultMaxDistance" field.</summary>
    public const int DefaultMaxDistanceFieldNumber = 11;
    private float defaultMaxDistance_;
    public float DefaultMaxDistance {
      get { return defaultMaxDistance_; }
      set {
        defaultMaxDistance_ = value;
      }
    }

    /// <summary>Field number for the "DefaultDopplerLevel" field.</summary>
    public const int DefaultDopplerLevelFieldNumber = 12;
    private float defaultDopplerLevel_;
    public float DefaultDopplerLevel {
      get { return defaultDopplerLevel_; }
      set {
        defaultDopplerLevel_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundConstantConfig);
    }

    public bool Equals(SoundConstantConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultTime, other.DefaultTime)) return false;
      if (DefaultMute != other.DefaultMute) return false;
      if (DefaultLoop != other.DefaultLoop) return false;
      if (DefaultPriority != other.DefaultPriority) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultVolume, other.DefaultVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultFadeInSeconds, other.DefaultFadeInSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultFadeOutSeconds, other.DefaultFadeOutSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultPitch, other.DefaultPitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultPanStereo, other.DefaultPanStereo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultSpatialBlend, other.DefaultSpatialBlend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultMaxDistance, other.DefaultMaxDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultDopplerLevel, other.DefaultDopplerLevel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (DefaultTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultTime);
      if (DefaultMute != false) hash ^= DefaultMute.GetHashCode();
      if (DefaultLoop != false) hash ^= DefaultLoop.GetHashCode();
      if (DefaultPriority != 0) hash ^= DefaultPriority.GetHashCode();
      if (DefaultVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultVolume);
      if (DefaultFadeInSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultFadeInSeconds);
      if (DefaultFadeOutSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultFadeOutSeconds);
      if (DefaultPitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultPitch);
      if (DefaultPanStereo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultPanStereo);
      if (DefaultSpatialBlend != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultSpatialBlend);
      if (DefaultMaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultMaxDistance);
      if (DefaultDopplerLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultDopplerLevel);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DefaultTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DefaultTime);
      }
      if (DefaultMute != false) {
        output.WriteRawTag(16);
        output.WriteBool(DefaultMute);
      }
      if (DefaultLoop != false) {
        output.WriteRawTag(24);
        output.WriteBool(DefaultLoop);
      }
      if (DefaultPriority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultPriority);
      }
      if (DefaultVolume != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DefaultVolume);
      }
      if (DefaultFadeInSeconds != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DefaultFadeInSeconds);
      }
      if (DefaultFadeOutSeconds != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DefaultFadeOutSeconds);
      }
      if (DefaultPitch != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DefaultPitch);
      }
      if (DefaultPanStereo != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DefaultPanStereo);
      }
      if (DefaultSpatialBlend != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DefaultSpatialBlend);
      }
      if (DefaultMaxDistance != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DefaultMaxDistance);
      }
      if (DefaultDopplerLevel != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DefaultDopplerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DefaultTime != 0F) {
        size += 1 + 4;
      }
      if (DefaultMute != false) {
        size += 1 + 1;
      }
      if (DefaultLoop != false) {
        size += 1 + 1;
      }
      if (DefaultPriority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultPriority);
      }
      if (DefaultVolume != 0F) {
        size += 1 + 4;
      }
      if (DefaultFadeInSeconds != 0F) {
        size += 1 + 4;
      }
      if (DefaultFadeOutSeconds != 0F) {
        size += 1 + 4;
      }
      if (DefaultPitch != 0F) {
        size += 1 + 4;
      }
      if (DefaultPanStereo != 0F) {
        size += 1 + 4;
      }
      if (DefaultSpatialBlend != 0F) {
        size += 1 + 4;
      }
      if (DefaultMaxDistance != 0F) {
        size += 1 + 4;
      }
      if (DefaultDopplerLevel != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundConstantConfig other) {
      if (other == null) {
        return;
      }
      if (other.DefaultTime != 0F) {
        DefaultTime = other.DefaultTime;
      }
      if (other.DefaultMute != false) {
        DefaultMute = other.DefaultMute;
      }
      if (other.DefaultLoop != false) {
        DefaultLoop = other.DefaultLoop;
      }
      if (other.DefaultPriority != 0) {
        DefaultPriority = other.DefaultPriority;
      }
      if (other.DefaultVolume != 0F) {
        DefaultVolume = other.DefaultVolume;
      }
      if (other.DefaultFadeInSeconds != 0F) {
        DefaultFadeInSeconds = other.DefaultFadeInSeconds;
      }
      if (other.DefaultFadeOutSeconds != 0F) {
        DefaultFadeOutSeconds = other.DefaultFadeOutSeconds;
      }
      if (other.DefaultPitch != 0F) {
        DefaultPitch = other.DefaultPitch;
      }
      if (other.DefaultPanStereo != 0F) {
        DefaultPanStereo = other.DefaultPanStereo;
      }
      if (other.DefaultSpatialBlend != 0F) {
        DefaultSpatialBlend = other.DefaultSpatialBlend;
      }
      if (other.DefaultMaxDistance != 0F) {
        DefaultMaxDistance = other.DefaultMaxDistance;
      }
      if (other.DefaultDopplerLevel != 0F) {
        DefaultDopplerLevel = other.DefaultDopplerLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DefaultTime = input.ReadFloat();
            break;
          }
          case 16: {
            DefaultMute = input.ReadBool();
            break;
          }
          case 24: {
            DefaultLoop = input.ReadBool();
            break;
          }
          case 32: {
            DefaultPriority = input.ReadInt32();
            break;
          }
          case 45: {
            DefaultVolume = input.ReadFloat();
            break;
          }
          case 53: {
            DefaultFadeInSeconds = input.ReadFloat();
            break;
          }
          case 61: {
            DefaultFadeOutSeconds = input.ReadFloat();
            break;
          }
          case 69: {
            DefaultPitch = input.ReadFloat();
            break;
          }
          case 77: {
            DefaultPanStereo = input.ReadFloat();
            break;
          }
          case 85: {
            DefaultSpatialBlend = input.ReadFloat();
            break;
          }
          case 93: {
            DefaultMaxDistance = input.ReadFloat();
            break;
          }
          case 101: {
            DefaultDopplerLevel = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundConfig : pb::IMessage<SoundConfig>
  {
    private static readonly pb::MessageParser<SoundConfig> _parser = new pb::MessageParser<SoundConfig>(() => new SoundConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<SoundConfig> Parser { get { return _parser; } }

    public SoundConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundConfig(SoundConfig other) : this() {
      id_ = other.id_;
      assetID_ = other.assetID_;
      soundGroupId_ = other.soundGroupId_;
      soundPlayParamId_ = other.soundPlayParamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundConfig Clone() {
      return new SoundConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AssetID" field.</summary>
    public const int AssetIDFieldNumber = 2;
    private int assetID_;
    public int AssetID {
      get { return assetID_; }
      set {
        assetID_ = value;
      }
    }

    /// <summary>Field number for the "SoundGroupId" field.</summary>
    public const int SoundGroupIdFieldNumber = 3;
    private int soundGroupId_;
    public int SoundGroupId {
      get { return soundGroupId_; }
      set {
        soundGroupId_ = value;
      }
    }

    /// <summary>Field number for the "SoundPlayParamId" field.</summary>
    public const int SoundPlayParamIdFieldNumber = 4;
    private int soundPlayParamId_;
    public int SoundPlayParamId {
      get { return soundPlayParamId_; }
      set {
        soundPlayParamId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundConfig);
    }

    public bool Equals(SoundConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AssetID != other.AssetID) return false;
      if (SoundGroupId != other.SoundGroupId) return false;
      if (SoundPlayParamId != other.SoundPlayParamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AssetID != 0) hash ^= AssetID.GetHashCode();
      if (SoundGroupId != 0) hash ^= SoundGroupId.GetHashCode();
      if (SoundPlayParamId != 0) hash ^= SoundPlayParamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AssetID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AssetID);
      }
      if (SoundGroupId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SoundGroupId);
      }
      if (SoundPlayParamId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SoundPlayParamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AssetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetID);
      }
      if (SoundGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundGroupId);
      }
      if (SoundPlayParamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundPlayParamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AssetID != 0) {
        AssetID = other.AssetID;
      }
      if (other.SoundGroupId != 0) {
        SoundGroupId = other.SoundGroupId;
      }
      if (other.SoundPlayParamId != 0) {
        SoundPlayParamId = other.SoundPlayParamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AssetID = input.ReadInt32();
            break;
          }
          case 24: {
            SoundGroupId = input.ReadInt32();
            break;
          }
          case 32: {
            SoundPlayParamId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundGroupConfig : pb::IMessage<SoundGroupConfig>
  {
    private static readonly pb::MessageParser<SoundGroupConfig> _parser = new pb::MessageParser<SoundGroupConfig>(() => new SoundGroupConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<SoundGroupConfig> Parser { get { return _parser; } }

    public SoundGroupConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundGroupConfig(SoundGroupConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      soundAgentCount_ = other.soundAgentCount_;
      avoidBeingReplacedBySamePriority_ = other.avoidBeingReplacedBySamePriority_;
      mute_ = other.mute_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundGroupConfig Clone() {
      return new SoundGroupConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SoundAgentCount" field.</summary>
    public const int SoundAgentCountFieldNumber = 3;
    private int soundAgentCount_;
    public int SoundAgentCount {
      get { return soundAgentCount_; }
      set {
        soundAgentCount_ = value;
      }
    }

    /// <summary>Field number for the "AvoidBeingReplacedBySamePriority" field.</summary>
    public const int AvoidBeingReplacedBySamePriorityFieldNumber = 4;
    private bool avoidBeingReplacedBySamePriority_;
    public bool AvoidBeingReplacedBySamePriority {
      get { return avoidBeingReplacedBySamePriority_; }
      set {
        avoidBeingReplacedBySamePriority_ = value;
      }
    }

    /// <summary>Field number for the "Mute" field.</summary>
    public const int MuteFieldNumber = 5;
    private bool mute_;
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private float volume_;
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundGroupConfig);
    }

    public bool Equals(SoundGroupConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (SoundAgentCount != other.SoundAgentCount) return false;
      if (AvoidBeingReplacedBySamePriority != other.AvoidBeingReplacedBySamePriority) return false;
      if (Mute != other.Mute) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (SoundAgentCount != 0) hash ^= SoundAgentCount.GetHashCode();
      if (AvoidBeingReplacedBySamePriority != false) hash ^= AvoidBeingReplacedBySamePriority.GetHashCode();
      if (Mute != false) hash ^= Mute.GetHashCode();
      if (Volume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (SoundAgentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SoundAgentCount);
      }
      if (AvoidBeingReplacedBySamePriority != false) {
        output.WriteRawTag(32);
        output.WriteBool(AvoidBeingReplacedBySamePriority);
      }
      if (Mute != false) {
        output.WriteRawTag(40);
        output.WriteBool(Mute);
      }
      if (Volume != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (SoundAgentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundAgentCount);
      }
      if (AvoidBeingReplacedBySamePriority != false) {
        size += 1 + 1;
      }
      if (Mute != false) {
        size += 1 + 1;
      }
      if (Volume != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundGroupConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.SoundAgentCount != 0) {
        SoundAgentCount = other.SoundAgentCount;
      }
      if (other.AvoidBeingReplacedBySamePriority != false) {
        AvoidBeingReplacedBySamePriority = other.AvoidBeingReplacedBySamePriority;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            SoundAgentCount = input.ReadInt32();
            break;
          }
          case 32: {
            AvoidBeingReplacedBySamePriority = input.ReadBool();
            break;
          }
          case 40: {
            Mute = input.ReadBool();
            break;
          }
          case 53: {
            Volume = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundParamConfig : pb::IMessage<SoundParamConfig>
  {
    private static readonly pb::MessageParser<SoundParamConfig> _parser = new pb::MessageParser<SoundParamConfig>(() => new SoundParamConfig());
    private pb::UnknownFieldSet _unknownFields;
    public static pb::MessageParser<SoundParamConfig> Parser { get { return _parser; } }

    public SoundParamConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundParamConfig(SoundParamConfig other) : this() {
      id_ = other.id_;
      time_ = other.time_;
      mute_ = other.mute_;
      loop_ = other.loop_;
      priority_ = other.priority_;
      volume_ = other.volume_;
      fadeInSeconds_ = other.fadeInSeconds_;
      pitch_ = other.pitch_;
      panStereo_ = other.panStereo_;
      spatialBlend_ = other.spatialBlend_;
      maxDistance_ = other.maxDistance_;
      dopplerLevel_ = other.dopplerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundParamConfig Clone() {
      return new SoundParamConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private float time_;
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 3;
    private bool mute_;
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 4;
    private bool loop_;
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "Priority" field.</summary>
    public const int PriorityFieldNumber = 5;
    private int priority_;
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private float volume_;
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "FadeInSeconds" field.</summary>
    public const int FadeInSecondsFieldNumber = 7;
    private float fadeInSeconds_;
    public float FadeInSeconds {
      get { return fadeInSeconds_; }
      set {
        fadeInSeconds_ = value;
      }
    }

    /// <summary>Field number for the "Pitch" field.</summary>
    public const int PitchFieldNumber = 8;
    private float pitch_;
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "PanStereo" field.</summary>
    public const int PanStereoFieldNumber = 9;
    private float panStereo_;
    public float PanStereo {
      get { return panStereo_; }
      set {
        panStereo_ = value;
      }
    }

    /// <summary>Field number for the "SpatialBlend" field.</summary>
    public const int SpatialBlendFieldNumber = 10;
    private float spatialBlend_;
    public float SpatialBlend {
      get { return spatialBlend_; }
      set {
        spatialBlend_ = value;
      }
    }

    /// <summary>Field number for the "MaxDistance" field.</summary>
    public const int MaxDistanceFieldNumber = 11;
    private float maxDistance_;
    public float MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    /// <summary>Field number for the "DopplerLevel" field.</summary>
    public const int DopplerLevelFieldNumber = 12;
    private float dopplerLevel_;
    public float DopplerLevel {
      get { return dopplerLevel_; }
      set {
        dopplerLevel_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundParamConfig);
    }

    public bool Equals(SoundParamConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Mute != other.Mute) return false;
      if (Loop != other.Loop) return false;
      if (Priority != other.Priority) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FadeInSeconds, other.FadeInSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PanStereo, other.PanStereo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpatialBlend, other.SpatialBlend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDistance, other.MaxDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DopplerLevel, other.DopplerLevel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Mute != false) hash ^= Mute.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Volume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (FadeInSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FadeInSeconds);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (PanStereo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PanStereo);
      if (SpatialBlend != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpatialBlend);
      if (MaxDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDistance);
      if (DopplerLevel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DopplerLevel);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Time != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Time);
      }
      if (Mute != false) {
        output.WriteRawTag(24);
        output.WriteBool(Mute);
      }
      if (Loop != false) {
        output.WriteRawTag(32);
        output.WriteBool(Loop);
      }
      if (Priority != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Priority);
      }
      if (Volume != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Volume);
      }
      if (FadeInSeconds != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FadeInSeconds);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Pitch);
      }
      if (PanStereo != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PanStereo);
      }
      if (SpatialBlend != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SpatialBlend);
      }
      if (MaxDistance != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MaxDistance);
      }
      if (DopplerLevel != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DopplerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Mute != false) {
        size += 1 + 1;
      }
      if (Loop != false) {
        size += 1 + 1;
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Volume != 0F) {
        size += 1 + 4;
      }
      if (FadeInSeconds != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (PanStereo != 0F) {
        size += 1 + 4;
      }
      if (SpatialBlend != 0F) {
        size += 1 + 4;
      }
      if (MaxDistance != 0F) {
        size += 1 + 4;
      }
      if (DopplerLevel != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundParamConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.FadeInSeconds != 0F) {
        FadeInSeconds = other.FadeInSeconds;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.PanStereo != 0F) {
        PanStereo = other.PanStereo;
      }
      if (other.SpatialBlend != 0F) {
        SpatialBlend = other.SpatialBlend;
      }
      if (other.MaxDistance != 0F) {
        MaxDistance = other.MaxDistance;
      }
      if (other.DopplerLevel != 0F) {
        DopplerLevel = other.DopplerLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 21: {
            Time = input.ReadFloat();
            break;
          }
          case 24: {
            Mute = input.ReadBool();
            break;
          }
          case 32: {
            Loop = input.ReadBool();
            break;
          }
          case 40: {
            Priority = input.ReadInt32();
            break;
          }
          case 53: {
            Volume = input.ReadFloat();
            break;
          }
          case 61: {
            FadeInSeconds = input.ReadFloat();
            break;
          }
          case 69: {
            Pitch = input.ReadFloat();
            break;
          }
          case 77: {
            PanStereo = input.ReadFloat();
            break;
          }
          case 85: {
            SpatialBlend = input.ReadFloat();
            break;
          }
          case 93: {
            MaxDistance = input.ReadFloat();
            break;
          }
          case 101: {
            DopplerLevel = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L10nlanguage_ch : pb::IMessage<L10nlanguage_ch>
  {
    private static readonly pb::MessageParser<L10nlanguage_ch> _parser = new pb::MessageParser<L10nlanguage_ch>(() => new L10nlanguage_ch());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<L10nlanguage_ch,L10nLanPatch> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       fileName = "L10nLanPatch_pb"
    };

    public L10nlanguage_ch() {
      OnConstruction();
    }

    partial void OnConstruction();

    public L10nlanguage_ch(L10nlanguage_ch other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public L10nlanguage_ch Clone() {
      return new L10nlanguage_ch(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.L10nLanPatch> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.L10nLanPatch.Parser);
    private readonly pbc::RepeatedField<global::Cfg.L10nLanPatch> dataList_ = new pbc::RepeatedField<global::Cfg.L10nLanPatch>();
    public pbc::RepeatedField<global::Cfg.L10nLanPatch> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as L10nlanguage_ch);
    }

    public bool Equals(L10nlanguage_ch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(L10nlanguage_ch other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class L10nlanguage_en : pb::IMessage<L10nlanguage_en>
  {
    private static readonly pb::MessageParser<L10nlanguage_en> _parser = new pb::MessageParser<L10nlanguage_en>(() => new L10nlanguage_en());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<L10nlanguage_en,L10nLanPatch> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       fileName = "L10nLanPatch_pb"
    };

    public L10nlanguage_en() {
      OnConstruction();
    }

    partial void OnConstruction();

    public L10nlanguage_en(L10nlanguage_en other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public L10nlanguage_en Clone() {
      return new L10nlanguage_en(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.L10nLanPatch> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.L10nLanPatch.Parser);
    private readonly pbc::RepeatedField<global::Cfg.L10nLanPatch> dataList_ = new pbc::RepeatedField<global::Cfg.L10nLanPatch>();
    public pbc::RepeatedField<global::Cfg.L10nLanPatch> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as L10nlanguage_en);
    }

    public bool Equals(L10nlanguage_en other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(L10nlanguage_en other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityCfgs : pb::IMessage<EntityCfgs>
  {
    private static readonly pb::MessageParser<EntityCfgs> _parser = new pb::MessageParser<EntityCfgs>(() => new EntityCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<EntityCfgs,EntityConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "EntityConfig_pb"
    };

    public EntityCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EntityCfgs(EntityCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public EntityCfgs Clone() {
      return new EntityCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.EntityConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.EntityConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.EntityConfig> dataList_ = new pbc::RepeatedField<global::Cfg.EntityConfig>();
    public pbc::RepeatedField<global::Cfg.EntityConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as EntityCfgs);
    }

    public bool Equals(EntityCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(EntityCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolParamCfgs : pb::IMessage<PoolParamCfgs>
  {
    private static readonly pb::MessageParser<PoolParamCfgs> _parser = new pb::MessageParser<PoolParamCfgs>(() => new PoolParamCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<PoolParamCfgs,PoolParamConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "PoolParamConfig_pb"
    };

    public PoolParamCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PoolParamCfgs(PoolParamCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public PoolParamCfgs Clone() {
      return new PoolParamCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.PoolParamConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.PoolParamConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.PoolParamConfig> dataList_ = new pbc::RepeatedField<global::Cfg.PoolParamConfig>();
    public pbc::RepeatedField<global::Cfg.PoolParamConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PoolParamCfgs);
    }

    public bool Equals(PoolParamCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(PoolParamCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityGroupCfgs : pb::IMessage<EntityGroupCfgs>
  {
    private static readonly pb::MessageParser<EntityGroupCfgs> _parser = new pb::MessageParser<EntityGroupCfgs>(() => new EntityGroupCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<EntityGroupCfgs,EntityGroupConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "EntityGroupConfig_pb"
    };

    public EntityGroupCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EntityGroupCfgs(EntityGroupCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public EntityGroupCfgs Clone() {
      return new EntityGroupCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.EntityGroupConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.EntityGroupConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.EntityGroupConfig> dataList_ = new pbc::RepeatedField<global::Cfg.EntityGroupConfig>();
    public pbc::RepeatedField<global::Cfg.EntityGroupConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as EntityGroupCfgs);
    }

    public bool Equals(EntityGroupCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(EntityGroupCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssetsPathCfgs : pb::IMessage<AssetsPathCfgs>
  {
    private static readonly pb::MessageParser<AssetsPathCfgs> _parser = new pb::MessageParser<AssetsPathCfgs>(() => new AssetsPathCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<AssetsPathCfgs,AssetsPathConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "AssetsPathConfig_pb"
    };

    public AssetsPathCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AssetsPathCfgs(AssetsPathCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public AssetsPathCfgs Clone() {
      return new AssetsPathCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.AssetsPathConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.AssetsPathConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.AssetsPathConfig> dataList_ = new pbc::RepeatedField<global::Cfg.AssetsPathConfig>();
    public pbc::RepeatedField<global::Cfg.AssetsPathConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AssetsPathCfgs);
    }

    public bool Equals(AssetsPathCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(AssetsPathCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollisionCfgs : pb::IMessage<CollisionCfgs>
  {
    private static readonly pb::MessageParser<CollisionCfgs> _parser = new pb::MessageParser<CollisionCfgs>(() => new CollisionCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<CollisionCfgs,CollisionConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       fileName = "CollisionConfig_pb"
    };

    public CollisionCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CollisionCfgs(CollisionCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public CollisionCfgs Clone() {
      return new CollisionCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.CollisionConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.CollisionConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.CollisionConfig> dataList_ = new pbc::RepeatedField<global::Cfg.CollisionConfig>();
    public pbc::RepeatedField<global::Cfg.CollisionConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CollisionCfgs);
    }

    public bool Equals(CollisionCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(CollisionCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInfoCfgs : pb::IMessage<SkillInfoCfgs>
  {
    private static readonly pb::MessageParser<SkillInfoCfgs> _parser = new pb::MessageParser<SkillInfoCfgs>(() => new SkillInfoCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<SkillInfoCfgs,SkillInfoConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "SkillInfoConfig_pb"
    };

    public SkillInfoCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SkillInfoCfgs(SkillInfoCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SkillInfoCfgs Clone() {
      return new SkillInfoCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.SkillInfoConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.SkillInfoConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.SkillInfoConfig> dataList_ = new pbc::RepeatedField<global::Cfg.SkillInfoConfig>();
    public pbc::RepeatedField<global::Cfg.SkillInfoConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SkillInfoCfgs);
    }

    public bool Equals(SkillInfoCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SkillInfoCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemTestCfgs : pb::IMessage<ItemTestCfgs>
  {
    private static readonly pb::MessageParser<ItemTestCfgs> _parser = new pb::MessageParser<ItemTestCfgs>(() => new ItemTestCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<ItemTestCfgs,ItemTestConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "ItemTestConfig_pb"
    };

    public ItemTestCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ItemTestCfgs(ItemTestCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public ItemTestCfgs Clone() {
      return new ItemTestCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.ItemTestConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.ItemTestConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.ItemTestConfig> dataList_ = new pbc::RepeatedField<global::Cfg.ItemTestConfig>();
    public pbc::RepeatedField<global::Cfg.ItemTestConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ItemTestCfgs);
    }

    public bool Equals(ItemTestCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(ItemTestCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIEntityCfgs : pb::IMessage<UIEntityCfgs>
  {
    private static readonly pb::MessageParser<UIEntityCfgs> _parser = new pb::MessageParser<UIEntityCfgs>(() => new UIEntityCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<UIEntityCfgs,UIEntityConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "UIEntityConfig_pb"
    };

    public UIEntityCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UIEntityCfgs(UIEntityCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public UIEntityCfgs Clone() {
      return new UIEntityCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.UIEntityConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.UIEntityConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.UIEntityConfig> dataList_ = new pbc::RepeatedField<global::Cfg.UIEntityConfig>();
    public pbc::RepeatedField<global::Cfg.UIEntityConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UIEntityCfgs);
    }

    public bool Equals(UIEntityCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(UIEntityCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundConstantCfgs : pb::IMessage<SoundConstantCfgs>
  {
    private static readonly pb::MessageParser<SoundConstantCfgs> _parser = new pb::MessageParser<SoundConstantCfgs>(() => new SoundConstantCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<SoundConstantCfgs,SoundConstantConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       fileName = "SoundConstantConfig_pb"
    };

    public SoundConstantCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundConstantCfgs(SoundConstantCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundConstantCfgs Clone() {
      return new SoundConstantCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.SoundConstantConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.SoundConstantConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.SoundConstantConfig> dataList_ = new pbc::RepeatedField<global::Cfg.SoundConstantConfig>();
    public pbc::RepeatedField<global::Cfg.SoundConstantConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundConstantCfgs);
    }

    public bool Equals(SoundConstantCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundConstantCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundCfgs : pb::IMessage<SoundCfgs>
  {
    private static readonly pb::MessageParser<SoundCfgs> _parser = new pb::MessageParser<SoundCfgs>(() => new SoundCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<SoundCfgs,SoundConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "SoundConfig_pb"
    };

    public SoundCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundCfgs(SoundCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundCfgs Clone() {
      return new SoundCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.SoundConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.SoundConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.SoundConfig> dataList_ = new pbc::RepeatedField<global::Cfg.SoundConfig>();
    public pbc::RepeatedField<global::Cfg.SoundConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundCfgs);
    }

    public bool Equals(SoundCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundGroupCfgs : pb::IMessage<SoundGroupCfgs>
  {
    private static readonly pb::MessageParser<SoundGroupCfgs> _parser = new pb::MessageParser<SoundGroupCfgs>(() => new SoundGroupCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<SoundGroupCfgs,SoundGroupConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "SoundGroupConfig_pb"
    };

    public SoundGroupCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundGroupCfgs(SoundGroupCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundGroupCfgs Clone() {
      return new SoundGroupCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.SoundGroupConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.SoundGroupConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.SoundGroupConfig> dataList_ = new pbc::RepeatedField<global::Cfg.SoundGroupConfig>();
    public pbc::RepeatedField<global::Cfg.SoundGroupConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundGroupCfgs);
    }

    public bool Equals(SoundGroupCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundGroupCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoundParamCfgs : pb::IMessage<SoundParamCfgs>
  {
    private static readonly pb::MessageParser<SoundParamCfgs> _parser = new pb::MessageParser<SoundParamCfgs>(() => new SoundParamCfgs());
    private pb::UnknownFieldSet _unknownFields;
    public static ConfigParserData<SoundParamCfgs,SoundParamConfig> parserData = new() {
       parseFrom = _parser.ParseFrom,
       getDataList = (obj) => obj.DataList,
       getIdFunc = (obj) => obj.Id,
       fileName = "SoundParamConfig_pb"
    };

    public SoundParamCfgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SoundParamCfgs(SoundParamCfgs other) : this() {
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    public SoundParamCfgs Clone() {
      return new SoundParamCfgs(this);
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cfg.SoundParamConfig> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(10, global::Cfg.SoundParamConfig.Parser);
    private readonly pbc::RepeatedField<global::Cfg.SoundParamConfig> dataList_ = new pbc::RepeatedField<global::Cfg.SoundParamConfig>();
    public pbc::RepeatedField<global::Cfg.SoundParamConfig> DataList {
      get { return dataList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as SoundParamCfgs);
    }

    public bool Equals(SoundParamCfgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    public void MergeFrom(SoundParamCfgs other) {
      if (other == null) {
        return;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
